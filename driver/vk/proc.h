// Code generated by procgen.go.

#ifndef PROC_H
#define PROC_H

#define VK_NO_PROTOTYPES
#define VK_USE_PLATFORM_WAYLAND_KHR
#define VK_USE_PLATFORM_XCB_KHR
#include <vulkan/vulkan.h>

// Function pointers.
extern PFN_vkCreateInstance createInstance;
extern PFN_vkDestroyInstance destroyInstance;
extern PFN_vkEnumeratePhysicalDevices enumeratePhysicalDevices;
extern PFN_vkGetDeviceProcAddr getDeviceProcAddr;
extern PFN_vkGetInstanceProcAddr getInstanceProcAddr;
extern PFN_vkGetPhysicalDeviceProperties getPhysicalDeviceProperties;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties getPhysicalDeviceQueueFamilyProperties;
extern PFN_vkGetPhysicalDeviceMemoryProperties getPhysicalDeviceMemoryProperties;
extern PFN_vkGetPhysicalDeviceFeatures getPhysicalDeviceFeatures;
extern PFN_vkGetPhysicalDeviceFormatProperties getPhysicalDeviceFormatProperties;
extern PFN_vkGetPhysicalDeviceImageFormatProperties getPhysicalDeviceImageFormatProperties;
extern PFN_vkCreateDevice createDevice;
extern PFN_vkDestroyDevice destroyDevice;
extern PFN_vkEnumerateInstanceVersion enumerateInstanceVersion;
extern PFN_vkEnumerateInstanceLayerProperties enumerateInstanceLayerProperties;
extern PFN_vkEnumerateInstanceExtensionProperties enumerateInstanceExtensionProperties;
extern PFN_vkEnumerateDeviceLayerProperties enumerateDeviceLayerProperties;
extern PFN_vkEnumerateDeviceExtensionProperties enumerateDeviceExtensionProperties;
extern PFN_vkGetDeviceQueue getDeviceQueue;
extern PFN_vkQueueSubmit queueSubmit;
extern PFN_vkQueueWaitIdle queueWaitIdle;
extern PFN_vkDeviceWaitIdle deviceWaitIdle;
extern PFN_vkAllocateMemory allocateMemory;
extern PFN_vkFreeMemory freeMemory;
extern PFN_vkMapMemory mapMemory;
extern PFN_vkUnmapMemory unmapMemory;
extern PFN_vkFlushMappedMemoryRanges flushMappedMemoryRanges;
extern PFN_vkInvalidateMappedMemoryRanges invalidateMappedMemoryRanges;
extern PFN_vkGetDeviceMemoryCommitment getDeviceMemoryCommitment;
extern PFN_vkGetBufferMemoryRequirements getBufferMemoryRequirements;
extern PFN_vkBindBufferMemory bindBufferMemory;
extern PFN_vkGetImageMemoryRequirements getImageMemoryRequirements;
extern PFN_vkBindImageMemory bindImageMemory;
extern PFN_vkGetImageSparseMemoryRequirements getImageSparseMemoryRequirements;
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties getPhysicalDeviceSparseImageFormatProperties;
extern PFN_vkQueueBindSparse queueBindSparse;
extern PFN_vkCreateFence createFence;
extern PFN_vkDestroyFence destroyFence;
extern PFN_vkResetFences resetFences;
extern PFN_vkGetFenceStatus getFenceStatus;
extern PFN_vkWaitForFences waitForFences;
extern PFN_vkCreateSemaphore createSemaphore;
extern PFN_vkDestroySemaphore destroySemaphore;
extern PFN_vkCreateEvent createEvent;
extern PFN_vkDestroyEvent destroyEvent;
extern PFN_vkGetEventStatus getEventStatus;
extern PFN_vkSetEvent setEvent;
extern PFN_vkResetEvent resetEvent;
extern PFN_vkCreateQueryPool createQueryPool;
extern PFN_vkDestroyQueryPool destroyQueryPool;
extern PFN_vkGetQueryPoolResults getQueryPoolResults;
extern PFN_vkResetQueryPool resetQueryPool;
extern PFN_vkCreateBuffer createBuffer;
extern PFN_vkDestroyBuffer destroyBuffer;
extern PFN_vkCreateBufferView createBufferView;
extern PFN_vkDestroyBufferView destroyBufferView;
extern PFN_vkCreateImage createImage;
extern PFN_vkDestroyImage destroyImage;
extern PFN_vkGetImageSubresourceLayout getImageSubresourceLayout;
extern PFN_vkCreateImageView createImageView;
extern PFN_vkDestroyImageView destroyImageView;
extern PFN_vkCreateShaderModule createShaderModule;
extern PFN_vkDestroyShaderModule destroyShaderModule;
extern PFN_vkCreatePipelineCache createPipelineCache;
extern PFN_vkDestroyPipelineCache destroyPipelineCache;
extern PFN_vkGetPipelineCacheData getPipelineCacheData;
extern PFN_vkMergePipelineCaches mergePipelineCaches;
extern PFN_vkCreateGraphicsPipelines createGraphicsPipelines;
extern PFN_vkCreateComputePipelines createComputePipelines;
extern PFN_vkDestroyPipeline destroyPipeline;
extern PFN_vkCreatePipelineLayout createPipelineLayout;
extern PFN_vkDestroyPipelineLayout destroyPipelineLayout;
extern PFN_vkCreateSampler createSampler;
extern PFN_vkDestroySampler destroySampler;
extern PFN_vkCreateDescriptorSetLayout createDescriptorSetLayout;
extern PFN_vkDestroyDescriptorSetLayout destroyDescriptorSetLayout;
extern PFN_vkCreateDescriptorPool createDescriptorPool;
extern PFN_vkDestroyDescriptorPool destroyDescriptorPool;
extern PFN_vkResetDescriptorPool resetDescriptorPool;
extern PFN_vkAllocateDescriptorSets allocateDescriptorSets;
extern PFN_vkFreeDescriptorSets freeDescriptorSets;
extern PFN_vkUpdateDescriptorSets updateDescriptorSets;
extern PFN_vkCreateFramebuffer createFramebuffer;
extern PFN_vkDestroyFramebuffer destroyFramebuffer;
extern PFN_vkCreateRenderPass createRenderPass;
extern PFN_vkDestroyRenderPass destroyRenderPass;
extern PFN_vkGetRenderAreaGranularity getRenderAreaGranularity;
extern PFN_vkCreateCommandPool createCommandPool;
extern PFN_vkDestroyCommandPool destroyCommandPool;
extern PFN_vkResetCommandPool resetCommandPool;
extern PFN_vkAllocateCommandBuffers allocateCommandBuffers;
extern PFN_vkFreeCommandBuffers freeCommandBuffers;
extern PFN_vkBeginCommandBuffer beginCommandBuffer;
extern PFN_vkEndCommandBuffer endCommandBuffer;
extern PFN_vkResetCommandBuffer resetCommandBuffer;
extern PFN_vkCmdBindPipeline cmdBindPipeline;
extern PFN_vkCmdSetViewport cmdSetViewport;
extern PFN_vkCmdSetScissor cmdSetScissor;
extern PFN_vkCmdSetLineWidth cmdSetLineWidth;
extern PFN_vkCmdSetDepthBias cmdSetDepthBias;
extern PFN_vkCmdSetBlendConstants cmdSetBlendConstants;
extern PFN_vkCmdSetDepthBounds cmdSetDepthBounds;
extern PFN_vkCmdSetStencilCompareMask cmdSetStencilCompareMask;
extern PFN_vkCmdSetStencilWriteMask cmdSetStencilWriteMask;
extern PFN_vkCmdSetStencilReference cmdSetStencilReference;
extern PFN_vkCmdBindDescriptorSets cmdBindDescriptorSets;
extern PFN_vkCmdBindIndexBuffer cmdBindIndexBuffer;
extern PFN_vkCmdBindVertexBuffers cmdBindVertexBuffers;
extern PFN_vkCmdDraw cmdDraw;
extern PFN_vkCmdDrawIndexed cmdDrawIndexed;
extern PFN_vkCmdDrawIndirect cmdDrawIndirect;
extern PFN_vkCmdDrawIndexedIndirect cmdDrawIndexedIndirect;
extern PFN_vkCmdDispatch cmdDispatch;
extern PFN_vkCmdDispatchIndirect cmdDispatchIndirect;
extern PFN_vkCmdCopyBuffer cmdCopyBuffer;
extern PFN_vkCmdCopyImage cmdCopyImage;
extern PFN_vkCmdBlitImage cmdBlitImage;
extern PFN_vkCmdCopyBufferToImage cmdCopyBufferToImage;
extern PFN_vkCmdCopyImageToBuffer cmdCopyImageToBuffer;
extern PFN_vkCmdUpdateBuffer cmdUpdateBuffer;
extern PFN_vkCmdFillBuffer cmdFillBuffer;
extern PFN_vkCmdClearColorImage cmdClearColorImage;
extern PFN_vkCmdClearDepthStencilImage cmdClearDepthStencilImage;
extern PFN_vkCmdClearAttachments cmdClearAttachments;
extern PFN_vkCmdResolveImage cmdResolveImage;
extern PFN_vkCmdSetEvent cmdSetEvent;
extern PFN_vkCmdResetEvent cmdResetEvent;
extern PFN_vkCmdWaitEvents cmdWaitEvents;
extern PFN_vkCmdPipelineBarrier cmdPipelineBarrier;
extern PFN_vkCmdBeginQuery cmdBeginQuery;
extern PFN_vkCmdEndQuery cmdEndQuery;
extern PFN_vkCmdResetQueryPool cmdResetQueryPool;
extern PFN_vkCmdWriteTimestamp cmdWriteTimestamp;
extern PFN_vkCmdCopyQueryPoolResults cmdCopyQueryPoolResults;
extern PFN_vkCmdPushConstants cmdPushConstants;
extern PFN_vkCmdBeginRenderPass cmdBeginRenderPass;
extern PFN_vkCmdNextSubpass cmdNextSubpass;
extern PFN_vkCmdEndRenderPass cmdEndRenderPass;
extern PFN_vkCmdExecuteCommands cmdExecuteCommands;
extern PFN_vkGetPhysicalDeviceDisplayPropertiesKHR getPhysicalDeviceDisplayPropertiesKHR;
extern PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR getPhysicalDeviceDisplayPlanePropertiesKHR;
extern PFN_vkGetDisplayPlaneSupportedDisplaysKHR getDisplayPlaneSupportedDisplaysKHR;
extern PFN_vkGetDisplayModePropertiesKHR getDisplayModePropertiesKHR;
extern PFN_vkCreateDisplayModeKHR createDisplayModeKHR;
extern PFN_vkGetDisplayPlaneCapabilitiesKHR getDisplayPlaneCapabilitiesKHR;
extern PFN_vkCreateDisplayPlaneSurfaceKHR createDisplayPlaneSurfaceKHR;
extern PFN_vkCreateSharedSwapchainsKHR createSharedSwapchainsKHR;
extern PFN_vkDestroySurfaceKHR destroySurfaceKHR;
extern PFN_vkGetPhysicalDeviceSurfaceSupportKHR getPhysicalDeviceSurfaceSupportKHR;
extern PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR getPhysicalDeviceSurfaceCapabilitiesKHR;
extern PFN_vkGetPhysicalDeviceSurfaceFormatsKHR getPhysicalDeviceSurfaceFormatsKHR;
extern PFN_vkGetPhysicalDeviceSurfacePresentModesKHR getPhysicalDeviceSurfacePresentModesKHR;
extern PFN_vkCreateSwapchainKHR createSwapchainKHR;
extern PFN_vkDestroySwapchainKHR destroySwapchainKHR;
extern PFN_vkGetSwapchainImagesKHR getSwapchainImagesKHR;
extern PFN_vkAcquireNextImageKHR acquireNextImageKHR;
extern PFN_vkQueuePresentKHR queuePresentKHR;
extern PFN_vkCreateWaylandSurfaceKHR createWaylandSurfaceKHR;
extern PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR getPhysicalDeviceWaylandPresentationSupportKHR;
extern PFN_vkCreateXcbSurfaceKHR createXcbSurfaceKHR;
extern PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR getPhysicalDeviceXcbPresentationSupportKHR;
extern PFN_vkGetPhysicalDeviceFeatures2 getPhysicalDeviceFeatures2;
extern PFN_vkGetPhysicalDeviceProperties2 getPhysicalDeviceProperties2;
extern PFN_vkGetPhysicalDeviceFormatProperties2 getPhysicalDeviceFormatProperties2;
extern PFN_vkGetPhysicalDeviceImageFormatProperties2 getPhysicalDeviceImageFormatProperties2;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties2 getPhysicalDeviceQueueFamilyProperties2;
extern PFN_vkGetPhysicalDeviceMemoryProperties2 getPhysicalDeviceMemoryProperties2;
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 getPhysicalDeviceSparseImageFormatProperties2;
extern PFN_vkTrimCommandPool trimCommandPool;
extern PFN_vkGetPhysicalDeviceExternalBufferProperties getPhysicalDeviceExternalBufferProperties;
extern PFN_vkGetPhysicalDeviceExternalSemaphoreProperties getPhysicalDeviceExternalSemaphoreProperties;
extern PFN_vkGetPhysicalDeviceExternalFenceProperties getPhysicalDeviceExternalFenceProperties;
extern PFN_vkEnumeratePhysicalDeviceGroups enumeratePhysicalDeviceGroups;
extern PFN_vkGetDeviceGroupPeerMemoryFeatures getDeviceGroupPeerMemoryFeatures;
extern PFN_vkBindBufferMemory2 bindBufferMemory2;
extern PFN_vkBindImageMemory2 bindImageMemory2;
extern PFN_vkCmdSetDeviceMask cmdSetDeviceMask;
extern PFN_vkCmdDispatchBase cmdDispatchBase;
extern PFN_vkCreateDescriptorUpdateTemplate createDescriptorUpdateTemplate;
extern PFN_vkDestroyDescriptorUpdateTemplate destroyDescriptorUpdateTemplate;
extern PFN_vkUpdateDescriptorSetWithTemplate updateDescriptorSetWithTemplate;
extern PFN_vkGetBufferMemoryRequirements2 getBufferMemoryRequirements2;
extern PFN_vkGetImageMemoryRequirements2 getImageMemoryRequirements2;
extern PFN_vkGetImageSparseMemoryRequirements2 getImageSparseMemoryRequirements2;
extern PFN_vkGetDeviceBufferMemoryRequirements getDeviceBufferMemoryRequirements;
extern PFN_vkGetDeviceImageMemoryRequirements getDeviceImageMemoryRequirements;
extern PFN_vkGetDeviceImageSparseMemoryRequirements getDeviceImageSparseMemoryRequirements;
extern PFN_vkCreateSamplerYcbcrConversion createSamplerYcbcrConversion;
extern PFN_vkDestroySamplerYcbcrConversion destroySamplerYcbcrConversion;
extern PFN_vkGetDeviceQueue2 getDeviceQueue2;
extern PFN_vkGetDescriptorSetLayoutSupport getDescriptorSetLayoutSupport;
extern PFN_vkCreateRenderPass2 createRenderPass2;
extern PFN_vkCmdBeginRenderPass2 cmdBeginRenderPass2;
extern PFN_vkCmdNextSubpass2 cmdNextSubpass2;
extern PFN_vkCmdEndRenderPass2 cmdEndRenderPass2;
extern PFN_vkGetSemaphoreCounterValue getSemaphoreCounterValue;
extern PFN_vkWaitSemaphores waitSemaphores;
extern PFN_vkSignalSemaphore signalSemaphore;
extern PFN_vkCmdDrawIndirectCount cmdDrawIndirectCount;
extern PFN_vkCmdDrawIndexedIndirectCount cmdDrawIndexedIndirectCount;
extern PFN_vkGetBufferOpaqueCaptureAddress getBufferOpaqueCaptureAddress;
extern PFN_vkGetBufferDeviceAddress getBufferDeviceAddress;
extern PFN_vkGetDeviceMemoryOpaqueCaptureAddress getDeviceMemoryOpaqueCaptureAddress;
extern PFN_vkGetPhysicalDeviceToolProperties getPhysicalDeviceToolProperties;
extern PFN_vkCmdSetCullMode cmdSetCullMode;
extern PFN_vkCmdSetFrontFace cmdSetFrontFace;
extern PFN_vkCmdSetPrimitiveTopology cmdSetPrimitiveTopology;
extern PFN_vkCmdSetViewportWithCount cmdSetViewportWithCount;
extern PFN_vkCmdSetScissorWithCount cmdSetScissorWithCount;
extern PFN_vkCmdBindVertexBuffers2 cmdBindVertexBuffers2;
extern PFN_vkCmdSetDepthTestEnable cmdSetDepthTestEnable;
extern PFN_vkCmdSetDepthWriteEnable cmdSetDepthWriteEnable;
extern PFN_vkCmdSetDepthCompareOp cmdSetDepthCompareOp;
extern PFN_vkCmdSetDepthBoundsTestEnable cmdSetDepthBoundsTestEnable;
extern PFN_vkCmdSetStencilTestEnable cmdSetStencilTestEnable;
extern PFN_vkCmdSetStencilOp cmdSetStencilOp;
extern PFN_vkCmdSetRasterizerDiscardEnable cmdSetRasterizerDiscardEnable;
extern PFN_vkCmdSetDepthBiasEnable cmdSetDepthBiasEnable;
extern PFN_vkCmdSetPrimitiveRestartEnable cmdSetPrimitiveRestartEnable;
extern PFN_vkCreatePrivateDataSlot createPrivateDataSlot;
extern PFN_vkDestroyPrivateDataSlot destroyPrivateDataSlot;
extern PFN_vkSetPrivateData setPrivateData;
extern PFN_vkGetPrivateData getPrivateData;
extern PFN_vkCmdCopyBuffer2 cmdCopyBuffer2;
extern PFN_vkCmdCopyImage2 cmdCopyImage2;
extern PFN_vkCmdBlitImage2 cmdBlitImage2;
extern PFN_vkCmdCopyBufferToImage2 cmdCopyBufferToImage2;
extern PFN_vkCmdCopyImageToBuffer2 cmdCopyImageToBuffer2;
extern PFN_vkCmdResolveImage2 cmdResolveImage2;
extern PFN_vkCmdSetEvent2 cmdSetEvent2;
extern PFN_vkCmdResetEvent2 cmdResetEvent2;
extern PFN_vkCmdWaitEvents2 cmdWaitEvents2;
extern PFN_vkCmdPipelineBarrier2 cmdPipelineBarrier2;
extern PFN_vkQueueSubmit2 queueSubmit2;
extern PFN_vkCmdWriteTimestamp2 cmdWriteTimestamp2;
extern PFN_vkCmdBeginRendering cmdBeginRendering;
extern PFN_vkCmdEndRendering cmdEndRendering;

// Functions that obtain the function pointers.
// The process of obtaining the procedures for use is as follows:
//
// 1. Fetch the vkGetInstanceProcAddr symbol and assign to getInstanceProcAddr.
// 2. Call getGlobalProcs to load global procedures.
// 3. Create a valid VkInstance and use it in a call to getInstanceProcs.
// 4. Create a valid VkDevice and use it in a call to getDeviceProcs.
//
// clearProcs can be used to set all function pointers other than
// getInstanceProcAddr to NULL.
void getGlobalProcs(void);
void getInstanceProcs(VkInstance dh);
void getDeviceProcs(VkDevice dh);
void clearProcs(void);

// Functions that wrap calls to function pointers, used by Go code.

// vkCreateInstance
static inline VkResult vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance) {
	return createInstance(pCreateInfo, pAllocator, pInstance);
}

// vkDestroyInstance
static inline void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator) {
	destroyInstance(instance, pAllocator);
}

// vkEnumeratePhysicalDevices
static inline VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
	return enumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
}

// vkGetDeviceProcAddr
static inline PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char* pName) {
	return getDeviceProcAddr(device, pName);
}

// vkGetInstanceProcAddr
static inline PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char* pName) {
	return getInstanceProcAddr(instance, pName);
}

// vkGetPhysicalDeviceProperties
static inline void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) {
	getPhysicalDeviceProperties(physicalDevice, pProperties);
}

// vkGetPhysicalDeviceQueueFamilyProperties
static inline void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) {
	getPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

// vkGetPhysicalDeviceMemoryProperties
static inline void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
	getPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
}

// vkGetPhysicalDeviceFeatures
static inline void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) {
	getPhysicalDeviceFeatures(physicalDevice, pFeatures);
}

// vkGetPhysicalDeviceFormatProperties
static inline void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) {
	getPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
}

// vkGetPhysicalDeviceImageFormatProperties
static inline VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
	return getPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}

// vkCreateDevice
static inline VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
	return createDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
}

// vkDestroyDevice
static inline void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator) {
	destroyDevice(device, pAllocator);
}

// vkEnumerateInstanceVersion
static inline VkResult vkEnumerateInstanceVersion(uint32_t* pApiVersion) {
	return enumerateInstanceVersion(pApiVersion);
}

// vkEnumerateInstanceLayerProperties
static inline VkResult vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return enumerateInstanceLayerProperties(pPropertyCount, pProperties);
}

// vkEnumerateInstanceExtensionProperties
static inline VkResult vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return enumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
}

// vkEnumerateDeviceLayerProperties
static inline VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return enumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
}

// vkEnumerateDeviceExtensionProperties
static inline VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return enumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
}

// vkGetDeviceQueue
static inline void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) {
	getDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
}

// vkQueueSubmit
static inline VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) {
	return queueSubmit(queue, submitCount, pSubmits, fence);
}

// vkQueueWaitIdle
static inline VkResult vkQueueWaitIdle(VkQueue queue) {
	return queueWaitIdle(queue);
}

// vkDeviceWaitIdle
static inline VkResult vkDeviceWaitIdle(VkDevice device) {
	return deviceWaitIdle(device);
}

// vkAllocateMemory
static inline VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
	return allocateMemory(device, pAllocateInfo, pAllocator, pMemory);
}

// vkFreeMemory
static inline void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) {
	freeMemory(device, memory, pAllocator);
}

// vkMapMemory
static inline VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
	return mapMemory(device, memory, offset, size, flags, ppData);
}

// vkUnmapMemory
static inline void vkUnmapMemory(VkDevice device, VkDeviceMemory memory) {
	unmapMemory(device, memory);
}

// vkFlushMappedMemoryRanges
static inline VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return flushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

// vkInvalidateMappedMemoryRanges
static inline VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return invalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

// vkGetDeviceMemoryCommitment
static inline void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) {
	getDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
}

// vkGetBufferMemoryRequirements
static inline void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) {
	getBufferMemoryRequirements(device, buffer, pMemoryRequirements);
}

// vkBindBufferMemory
static inline VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return bindBufferMemory(device, buffer, memory, memoryOffset);
}

// vkGetImageMemoryRequirements
static inline void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) {
	getImageMemoryRequirements(device, image, pMemoryRequirements);
}

// vkBindImageMemory
static inline VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return bindImageMemory(device, image, memory, memoryOffset);
}

// vkGetImageSparseMemoryRequirements
static inline void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
	getImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

// vkGetPhysicalDeviceSparseImageFormatProperties
static inline void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) {
	getPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}

// vkQueueBindSparse
static inline VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) {
	return queueBindSparse(queue, bindInfoCount, pBindInfo, fence);
}

// vkCreateFence
static inline VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	return createFence(device, pCreateInfo, pAllocator, pFence);
}

// vkDestroyFence
static inline void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator) {
	destroyFence(device, fence, pAllocator);
}

// vkResetFences
static inline VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences) {
	return resetFences(device, fenceCount, pFences);
}

// vkGetFenceStatus
static inline VkResult vkGetFenceStatus(VkDevice device, VkFence fence) {
	return getFenceStatus(device, fence);
}

// vkWaitForFences
static inline VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) {
	return waitForFences(device, fenceCount, pFences, waitAll, timeout);
}

// vkCreateSemaphore
static inline VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
	return createSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
}

// vkDestroySemaphore
static inline void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) {
	destroySemaphore(device, semaphore, pAllocator);
}

// vkCreateEvent
static inline VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
	return createEvent(device, pCreateInfo, pAllocator, pEvent);
}

// vkDestroyEvent
static inline void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator) {
	destroyEvent(device, event, pAllocator);
}

// vkGetEventStatus
static inline VkResult vkGetEventStatus(VkDevice device, VkEvent event) {
	return getEventStatus(device, event);
}

// vkSetEvent
static inline VkResult vkSetEvent(VkDevice device, VkEvent event) {
	return setEvent(device, event);
}

// vkResetEvent
static inline VkResult vkResetEvent(VkDevice device, VkEvent event) {
	return resetEvent(device, event);
}

// vkCreateQueryPool
static inline VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
	return createQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
}

// vkDestroyQueryPool
static inline void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) {
	destroyQueryPool(device, queryPool, pAllocator);
}

// vkGetQueryPoolResults
static inline VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
	return getQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}

// vkResetQueryPool
static inline void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	resetQueryPool(device, queryPool, firstQuery, queryCount);
}

// vkCreateBuffer
static inline VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
	return createBuffer(device, pCreateInfo, pAllocator, pBuffer);
}

// vkDestroyBuffer
static inline void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator) {
	destroyBuffer(device, buffer, pAllocator);
}

// vkCreateBufferView
static inline VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
	return createBufferView(device, pCreateInfo, pAllocator, pView);
}

// vkDestroyBufferView
static inline void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) {
	destroyBufferView(device, bufferView, pAllocator);
}

// vkCreateImage
static inline VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) {
	return createImage(device, pCreateInfo, pAllocator, pImage);
}

// vkDestroyImage
static inline void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator) {
	destroyImage(device, image, pAllocator);
}

// vkGetImageSubresourceLayout
static inline void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) {
	getImageSubresourceLayout(device, image, pSubresource, pLayout);
}

// vkCreateImageView
static inline VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) {
	return createImageView(device, pCreateInfo, pAllocator, pView);
}

// vkDestroyImageView
static inline void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator) {
	destroyImageView(device, imageView, pAllocator);
}

// vkCreateShaderModule
static inline VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
	return createShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
}

// vkDestroyShaderModule
static inline void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) {
	destroyShaderModule(device, shaderModule, pAllocator);
}

// vkCreatePipelineCache
static inline VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
	return createPipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
}

// vkDestroyPipelineCache
static inline void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) {
	destroyPipelineCache(device, pipelineCache, pAllocator);
}

// vkGetPipelineCacheData
static inline VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) {
	return getPipelineCacheData(device, pipelineCache, pDataSize, pData);
}

// vkMergePipelineCaches
static inline VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) {
	return mergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
}

// vkCreateGraphicsPipelines
static inline VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return createGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}

// vkCreateComputePipelines
static inline VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return createComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}

// vkDestroyPipeline
static inline void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) {
	destroyPipeline(device, pipeline, pAllocator);
}

// vkCreatePipelineLayout
static inline VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
	return createPipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
}

// vkDestroyPipelineLayout
static inline void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) {
	destroyPipelineLayout(device, pipelineLayout, pAllocator);
}

// vkCreateSampler
static inline VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
	return createSampler(device, pCreateInfo, pAllocator, pSampler);
}

// vkDestroySampler
static inline void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator) {
	destroySampler(device, sampler, pAllocator);
}

// vkCreateDescriptorSetLayout
static inline VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
	return createDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
}

// vkDestroyDescriptorSetLayout
static inline void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) {
	destroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
}

// vkCreateDescriptorPool
static inline VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
	return createDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
}

// vkDestroyDescriptorPool
static inline void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) {
	destroyDescriptorPool(device, descriptorPool, pAllocator);
}

// vkResetDescriptorPool
static inline VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
	return resetDescriptorPool(device, descriptorPool, flags);
}

// vkAllocateDescriptorSets
static inline VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
	return allocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
}

// vkFreeDescriptorSets
static inline VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) {
	return freeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
}

// vkUpdateDescriptorSets
static inline void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) {
	updateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}

// vkCreateFramebuffer
static inline VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
	return createFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
}

// vkDestroyFramebuffer
static inline void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) {
	destroyFramebuffer(device, framebuffer, pAllocator);
}

// vkCreateRenderPass
static inline VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return createRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
}

// vkDestroyRenderPass
static inline void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) {
	destroyRenderPass(device, renderPass, pAllocator);
}

// vkGetRenderAreaGranularity
static inline void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) {
	getRenderAreaGranularity(device, renderPass, pGranularity);
}

// vkCreateCommandPool
static inline VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
	return createCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
}

// vkDestroyCommandPool
static inline void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) {
	destroyCommandPool(device, commandPool, pAllocator);
}

// vkResetCommandPool
static inline VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
	return resetCommandPool(device, commandPool, flags);
}

// vkAllocateCommandBuffers
static inline VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
	return allocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
}

// vkFreeCommandBuffers
static inline void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	freeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
}

// vkBeginCommandBuffer
static inline VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) {
	return beginCommandBuffer(commandBuffer, pBeginInfo);
}

// vkEndCommandBuffer
static inline VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer) {
	return endCommandBuffer(commandBuffer);
}

// vkResetCommandBuffer
static inline VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
	return resetCommandBuffer(commandBuffer, flags);
}

// vkCmdBindPipeline
static inline void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	cmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}

// vkCmdSetViewport
static inline void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) {
	cmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

// vkCmdSetScissor
static inline void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) {
	cmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

// vkCmdSetLineWidth
static inline void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
	cmdSetLineWidth(commandBuffer, lineWidth);
}

// vkCmdSetDepthBias
static inline void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
	cmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

// vkCmdSetBlendConstants
static inline void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) {
	cmdSetBlendConstants(commandBuffer, blendConstants);
}

// vkCmdSetDepthBounds
static inline void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
	cmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

// vkCmdSetStencilCompareMask
static inline void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
	cmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

// vkCmdSetStencilWriteMask
static inline void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
	cmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

// vkCmdSetStencilReference
static inline void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
	cmdSetStencilReference(commandBuffer, faceMask, reference);
}

// vkCmdBindDescriptorSets
static inline void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) {
	cmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

// vkCmdBindIndexBuffer
static inline void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
	cmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

// vkCmdBindVertexBuffers
static inline void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) {
	cmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

// vkCmdDraw
static inline void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	cmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

// vkCmdDrawIndexed
static inline void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) {
	cmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

// vkCmdDrawIndirect
static inline void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	cmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

// vkCmdDrawIndexedIndirect
static inline void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	cmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

// vkCmdDispatch
static inline void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	cmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}

// vkCmdDispatchIndirect
static inline void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	cmdDispatchIndirect(commandBuffer, buffer, offset);
}

// vkCmdCopyBuffer
static inline void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) {
	cmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

// vkCmdCopyImage
static inline void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) {
	cmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdBlitImage
static inline void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) {
	cmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

// vkCmdCopyBufferToImage
static inline void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	cmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdCopyImageToBuffer
static inline void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	cmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

// vkCmdUpdateBuffer
static inline void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) {
	cmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

// vkCmdFillBuffer
static inline void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
	cmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

// vkCmdClearColorImage
static inline void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	cmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

// vkCmdClearDepthStencilImage
static inline void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	cmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

// vkCmdClearAttachments
static inline void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) {
	cmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

// vkCmdResolveImage
static inline void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) {
	cmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdSetEvent
static inline void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	cmdSetEvent(commandBuffer, event, stageMask);
}

// vkCmdResetEvent
static inline void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	cmdResetEvent(commandBuffer, event, stageMask);
}

// vkCmdWaitEvents
static inline void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	cmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

// vkCmdPipelineBarrier
static inline void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	cmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

// vkCmdBeginQuery
static inline void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
	cmdBeginQuery(commandBuffer, queryPool, query, flags);
}

// vkCmdEndQuery
static inline void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
	cmdEndQuery(commandBuffer, queryPool, query);
}

// vkCmdResetQueryPool
static inline void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	cmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

// vkCmdWriteTimestamp
static inline void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) {
	cmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

// vkCmdCopyQueryPoolResults
static inline void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) {
	cmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

// vkCmdPushConstants
static inline void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) {
	cmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

// vkCmdBeginRenderPass
static inline void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) {
	cmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

// vkCmdNextSubpass
static inline void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) {
	cmdNextSubpass(commandBuffer, contents);
}

// vkCmdEndRenderPass
static inline void vkCmdEndRenderPass(VkCommandBuffer commandBuffer) {
	cmdEndRenderPass(commandBuffer);
}

// vkCmdExecuteCommands
static inline void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	cmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

// vkGetPhysicalDeviceDisplayPropertiesKHR
static inline VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) {
	return getPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
}

// vkGetPhysicalDeviceDisplayPlanePropertiesKHR
static inline VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) {
	return getPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
}

// vkGetDisplayPlaneSupportedDisplaysKHR
static inline VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) {
	return getDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
}

// vkGetDisplayModePropertiesKHR
static inline VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) {
	return getDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
}

// vkCreateDisplayModeKHR
static inline VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) {
	return createDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
}

// vkGetDisplayPlaneCapabilitiesKHR
static inline VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) {
	return getDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
}

// vkCreateDisplayPlaneSurfaceKHR
static inline VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}

// vkCreateSharedSwapchainsKHR
static inline VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) {
	return createSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
}

// vkDestroySurfaceKHR
static inline void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) {
	destroySurfaceKHR(instance, surface, pAllocator);
}

// vkGetPhysicalDeviceSurfaceSupportKHR
static inline VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) {
	return getPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
}

// vkGetPhysicalDeviceSurfaceCapabilitiesKHR
static inline VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
	return getPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
}

// vkGetPhysicalDeviceSurfaceFormatsKHR
static inline VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
	return getPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}

// vkGetPhysicalDeviceSurfacePresentModesKHR
static inline VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	return getPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
}

// vkCreateSwapchainKHR
static inline VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) {
	return createSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
}

// vkDestroySwapchainKHR
static inline void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {
	destroySwapchainKHR(device, swapchain, pAllocator);
}

// vkGetSwapchainImagesKHR
static inline VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) {
	return getSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
}

// vkAcquireNextImageKHR
static inline VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) {
	return acquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
}

// vkQueuePresentKHR
static inline VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo) {
	return queuePresentKHR(queue, pPresentInfo);
}

// vkCreateWaylandSurfaceKHR
static inline VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}

// vkGetPhysicalDeviceWaylandPresentationSupportKHR
static inline VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display) {
	return getPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
}

// vkCreateXcbSurfaceKHR
static inline VkResult vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}

// vkGetPhysicalDeviceXcbPresentationSupportKHR
static inline VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id) {
	return getPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
}

// vkGetPhysicalDeviceFeatures2
static inline void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) {
	getPhysicalDeviceFeatures2(physicalDevice, pFeatures);
}

// vkGetPhysicalDeviceProperties2
static inline void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) {
	getPhysicalDeviceProperties2(physicalDevice, pProperties);
}

// vkGetPhysicalDeviceFormatProperties2
static inline void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) {
	getPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
}

// vkGetPhysicalDeviceImageFormatProperties2
static inline VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
	return getPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
}

// vkGetPhysicalDeviceQueueFamilyProperties2
static inline void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) {
	getPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

// vkGetPhysicalDeviceMemoryProperties2
static inline void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
	getPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
}

// vkGetPhysicalDeviceSparseImageFormatProperties2
static inline void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) {
	getPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}

// vkTrimCommandPool
static inline void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
	trimCommandPool(device, commandPool, flags);
}

// vkGetPhysicalDeviceExternalBufferProperties
static inline void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) {
	getPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}

// vkGetPhysicalDeviceExternalSemaphoreProperties
static inline void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) {
	getPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}

// vkGetPhysicalDeviceExternalFenceProperties
static inline void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) {
	getPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}

// vkEnumeratePhysicalDeviceGroups
static inline VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) {
	return enumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}

// vkGetDeviceGroupPeerMemoryFeatures
static inline void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) {
	getDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}

// vkBindBufferMemory2
static inline VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos) {
	return bindBufferMemory2(device, bindInfoCount, pBindInfos);
}

// vkBindImageMemory2
static inline VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos) {
	return bindImageMemory2(device, bindInfoCount, pBindInfos);
}

// vkCmdSetDeviceMask
static inline void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
	cmdSetDeviceMask(commandBuffer, deviceMask);
}

// vkCmdDispatchBase
static inline void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	cmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

// vkCreateDescriptorUpdateTemplate
static inline VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) {
	return createDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}

// vkDestroyDescriptorUpdateTemplate
static inline void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
	destroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
}

// vkUpdateDescriptorSetWithTemplate
static inline void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData) {
	updateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
}

// vkGetBufferMemoryRequirements2
static inline void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	getBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
}

// vkGetImageMemoryRequirements2
static inline void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	getImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
}

// vkGetImageSparseMemoryRequirements2
static inline void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
	getImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

// vkGetDeviceBufferMemoryRequirements
static inline void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	getDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
}

// vkGetDeviceImageMemoryRequirements
static inline void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	getDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
}

// vkGetDeviceImageSparseMemoryRequirements
static inline void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
	getDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

// vkCreateSamplerYcbcrConversion
static inline VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) {
	return createSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
}

// vkDestroySamplerYcbcrConversion
static inline void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
	destroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
}

// vkGetDeviceQueue2
static inline void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) {
	getDeviceQueue2(device, pQueueInfo, pQueue);
}

// vkGetDescriptorSetLayoutSupport
static inline void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) {
	getDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
}

// vkCreateRenderPass2
static inline VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return createRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
}

// vkCmdBeginRenderPass2
static inline void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo) {
	cmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}

// vkCmdNextSubpass2
static inline void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo) {
	cmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}

// vkCmdEndRenderPass2
static inline void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo) {
	cmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
}

// vkGetSemaphoreCounterValue
static inline VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) {
	return getSemaphoreCounterValue(device, semaphore, pValue);
}

// vkWaitSemaphores
static inline VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout) {
	return waitSemaphores(device, pWaitInfo, timeout);
}

// vkSignalSemaphore
static inline VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo) {
	return signalSemaphore(device, pSignalInfo);
}

// vkCmdDrawIndirectCount
static inline void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	cmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}

// vkCmdDrawIndexedIndirectCount
static inline void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	cmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}

// vkGetBufferOpaqueCaptureAddress
static inline uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo) {
	return getBufferOpaqueCaptureAddress(device, pInfo);
}

// vkGetBufferDeviceAddress
static inline VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo) {
	return getBufferDeviceAddress(device, pInfo);
}

// vkGetDeviceMemoryOpaqueCaptureAddress
static inline uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) {
	return getDeviceMemoryOpaqueCaptureAddress(device, pInfo);
}

// vkGetPhysicalDeviceToolProperties
static inline VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) {
	return getPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
}

// vkCmdSetCullMode
static inline void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	cmdSetCullMode(commandBuffer, cullMode);
}

// vkCmdSetFrontFace
static inline void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	cmdSetFrontFace(commandBuffer, frontFace);
}

// vkCmdSetPrimitiveTopology
static inline void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
	cmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
}

// vkCmdSetViewportWithCount
static inline void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) {
	cmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
}

// vkCmdSetScissorWithCount
static inline void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) {
	cmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
}

// vkCmdBindVertexBuffers2
static inline void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) {
	cmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}

// vkCmdSetDepthTestEnable
static inline void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
	cmdSetDepthTestEnable(commandBuffer, depthTestEnable);
}

// vkCmdSetDepthWriteEnable
static inline void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
	cmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
}

// vkCmdSetDepthCompareOp
static inline void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
	cmdSetDepthCompareOp(commandBuffer, depthCompareOp);
}

// vkCmdSetDepthBoundsTestEnable
static inline void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
	cmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
}

// vkCmdSetStencilTestEnable
static inline void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
	cmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
}

// vkCmdSetStencilOp
static inline void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) {
	cmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}

// vkCmdSetRasterizerDiscardEnable
static inline void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
	cmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
}

// vkCmdSetDepthBiasEnable
static inline void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
	cmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
}

// vkCmdSetPrimitiveRestartEnable
static inline void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
	cmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
}

// vkCreatePrivateDataSlot
static inline VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) {
	return createPrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
}

// vkDestroyPrivateDataSlot
static inline void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator) {
	destroyPrivateDataSlot(device, privateDataSlot, pAllocator);
}

// vkSetPrivateData
static inline VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) {
	return setPrivateData(device, objectType, objectHandle, privateDataSlot, data);
}

// vkGetPrivateData
static inline void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) {
	getPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
}

// vkCmdCopyBuffer2
static inline void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo) {
	cmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
}

// vkCmdCopyImage2
static inline void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo) {
	cmdCopyImage2(commandBuffer, pCopyImageInfo);
}

// vkCmdBlitImage2
static inline void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo) {
	cmdBlitImage2(commandBuffer, pBlitImageInfo);
}

// vkCmdCopyBufferToImage2
static inline void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo) {
	cmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
}

// vkCmdCopyImageToBuffer2
static inline void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo) {
	cmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
}

// vkCmdResolveImage2
static inline void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo) {
	cmdResolveImage2(commandBuffer, pResolveImageInfo);
}

// vkCmdSetEvent2
static inline void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo) {
	cmdSetEvent2(commandBuffer, event, pDependencyInfo);
}

// vkCmdResetEvent2
static inline void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) {
	cmdResetEvent2(commandBuffer, event, stageMask);
}

// vkCmdWaitEvents2
static inline void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos) {
	cmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
}

// vkCmdPipelineBarrier2
static inline void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo) {
	cmdPipelineBarrier2(commandBuffer, pDependencyInfo);
}

// vkQueueSubmit2
static inline VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence) {
	return queueSubmit2(queue, submitCount, pSubmits, fence);
}

// vkCmdWriteTimestamp2
static inline void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) {
	cmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
}

// vkCmdBeginRendering
static inline void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo) {
	cmdBeginRendering(commandBuffer, pRenderingInfo);
}

// vkCmdEndRendering
static inline void vkCmdEndRendering(VkCommandBuffer commandBuffer) {
	cmdEndRendering(commandBuffer);
}

#endif // PROC_H
