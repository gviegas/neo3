// Code generated by procgen.go. DO NOT EDIT.

// [vk.xml 0.1.3.251]

#ifndef PROC_H
#define PROC_H

#define VK_NO_PROTOTYPES
#if !defined(__ANDROID__) && !defined(_WIN32)
# define VK_USE_PLATFORM_XCB_KHR
# ifdef __linux__
#  define VK_USE_PLATFORM_WAYLAND_KHR
# endif
#elif defined(__ANDROID__)
# define VK_USE_PLATFORM_ANDROID_KHR
#elif defined(_WIN32)
# define VK_USE_PLATFORM_WIN32_KHR
#endif

#include <vulkan/vulkan.h>

// Function pointers.
extern PFN_vkCreateInstance createInstance;
extern PFN_vkDestroyInstance destroyInstance;
extern PFN_vkEnumeratePhysicalDevices enumeratePhysicalDevices;
extern PFN_vkGetDeviceProcAddr getDeviceProcAddr;
extern PFN_vkGetInstanceProcAddr getInstanceProcAddr;
extern PFN_vkGetPhysicalDeviceProperties getPhysicalDeviceProperties;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties getPhysicalDeviceQueueFamilyProperties;
extern PFN_vkGetPhysicalDeviceMemoryProperties getPhysicalDeviceMemoryProperties;
extern PFN_vkGetPhysicalDeviceFeatures getPhysicalDeviceFeatures;
extern PFN_vkGetPhysicalDeviceFormatProperties getPhysicalDeviceFormatProperties;
extern PFN_vkGetPhysicalDeviceImageFormatProperties getPhysicalDeviceImageFormatProperties;
extern PFN_vkCreateDevice createDevice;
extern PFN_vkDestroyDevice destroyDevice;
extern PFN_vkEnumerateInstanceVersion enumerateInstanceVersion;
extern PFN_vkEnumerateInstanceLayerProperties enumerateInstanceLayerProperties;
extern PFN_vkEnumerateInstanceExtensionProperties enumerateInstanceExtensionProperties;
extern PFN_vkEnumerateDeviceLayerProperties enumerateDeviceLayerProperties;
extern PFN_vkEnumerateDeviceExtensionProperties enumerateDeviceExtensionProperties;
extern PFN_vkGetDeviceQueue getDeviceQueue;
extern PFN_vkQueueSubmit queueSubmit;
extern PFN_vkQueueWaitIdle queueWaitIdle;
extern PFN_vkDeviceWaitIdle deviceWaitIdle;
extern PFN_vkAllocateMemory allocateMemory;
extern PFN_vkFreeMemory freeMemory;
extern PFN_vkMapMemory mapMemory;
extern PFN_vkUnmapMemory unmapMemory;
extern PFN_vkFlushMappedMemoryRanges flushMappedMemoryRanges;
extern PFN_vkInvalidateMappedMemoryRanges invalidateMappedMemoryRanges;
extern PFN_vkGetDeviceMemoryCommitment getDeviceMemoryCommitment;
extern PFN_vkGetBufferMemoryRequirements getBufferMemoryRequirements;
extern PFN_vkBindBufferMemory bindBufferMemory;
extern PFN_vkGetImageMemoryRequirements getImageMemoryRequirements;
extern PFN_vkBindImageMemory bindImageMemory;
extern PFN_vkGetImageSparseMemoryRequirements getImageSparseMemoryRequirements;
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties getPhysicalDeviceSparseImageFormatProperties;
extern PFN_vkQueueBindSparse queueBindSparse;
extern PFN_vkCreateFence createFence;
extern PFN_vkDestroyFence destroyFence;
extern PFN_vkResetFences resetFences;
extern PFN_vkGetFenceStatus getFenceStatus;
extern PFN_vkWaitForFences waitForFences;
extern PFN_vkCreateSemaphore createSemaphore;
extern PFN_vkDestroySemaphore destroySemaphore;
extern PFN_vkCreateEvent createEvent;
extern PFN_vkDestroyEvent destroyEvent;
extern PFN_vkGetEventStatus getEventStatus;
extern PFN_vkSetEvent setEvent;
extern PFN_vkResetEvent resetEvent;
extern PFN_vkCreateQueryPool createQueryPool;
extern PFN_vkDestroyQueryPool destroyQueryPool;
extern PFN_vkGetQueryPoolResults getQueryPoolResults;
extern PFN_vkCmdEndRenderingKHR cmdEndRenderingKHR;
extern PFN_vkCmdBeginRenderingKHR cmdBeginRenderingKHR;
extern PFN_vkCreateBuffer createBuffer;
extern PFN_vkDestroyBuffer destroyBuffer;
extern PFN_vkCreateBufferView createBufferView;
extern PFN_vkDestroyBufferView destroyBufferView;
extern PFN_vkCreateImage createImage;
extern PFN_vkDestroyImage destroyImage;
extern PFN_vkGetImageSubresourceLayout getImageSubresourceLayout;
extern PFN_vkCreateImageView createImageView;
extern PFN_vkDestroyImageView destroyImageView;
extern PFN_vkCreateShaderModule createShaderModule;
extern PFN_vkDestroyShaderModule destroyShaderModule;
extern PFN_vkCreatePipelineCache createPipelineCache;
extern PFN_vkDestroyPipelineCache destroyPipelineCache;
extern PFN_vkGetPipelineCacheData getPipelineCacheData;
extern PFN_vkMergePipelineCaches mergePipelineCaches;
extern PFN_vkCreateGraphicsPipelines createGraphicsPipelines;
extern PFN_vkCreateComputePipelines createComputePipelines;
extern PFN_vkCmdWriteTimestamp2KHR cmdWriteTimestamp2KHR;
extern PFN_vkDestroyPipeline destroyPipeline;
extern PFN_vkCreatePipelineLayout createPipelineLayout;
extern PFN_vkDestroyPipelineLayout destroyPipelineLayout;
extern PFN_vkCreateSampler createSampler;
extern PFN_vkDestroySampler destroySampler;
extern PFN_vkCreateDescriptorSetLayout createDescriptorSetLayout;
extern PFN_vkDestroyDescriptorSetLayout destroyDescriptorSetLayout;
extern PFN_vkCreateDescriptorPool createDescriptorPool;
extern PFN_vkDestroyDescriptorPool destroyDescriptorPool;
extern PFN_vkResetDescriptorPool resetDescriptorPool;
extern PFN_vkAllocateDescriptorSets allocateDescriptorSets;
extern PFN_vkFreeDescriptorSets freeDescriptorSets;
extern PFN_vkUpdateDescriptorSets updateDescriptorSets;
extern PFN_vkCreateFramebuffer createFramebuffer;
extern PFN_vkDestroyFramebuffer destroyFramebuffer;
extern PFN_vkCreateRenderPass createRenderPass;
extern PFN_vkDestroyRenderPass destroyRenderPass;
extern PFN_vkGetRenderAreaGranularity getRenderAreaGranularity;
extern PFN_vkCreateCommandPool createCommandPool;
extern PFN_vkDestroyCommandPool destroyCommandPool;
extern PFN_vkResetCommandPool resetCommandPool;
extern PFN_vkAllocateCommandBuffers allocateCommandBuffers;
extern PFN_vkFreeCommandBuffers freeCommandBuffers;
extern PFN_vkBeginCommandBuffer beginCommandBuffer;
extern PFN_vkEndCommandBuffer endCommandBuffer;
extern PFN_vkResetCommandBuffer resetCommandBuffer;
extern PFN_vkCmdBindPipeline cmdBindPipeline;
extern PFN_vkQueueSubmit2KHR queueSubmit2KHR;
extern PFN_vkCmdSetViewport cmdSetViewport;
extern PFN_vkCmdSetScissor cmdSetScissor;
extern PFN_vkCmdSetLineWidth cmdSetLineWidth;
extern PFN_vkCmdSetDepthBias cmdSetDepthBias;
extern PFN_vkCmdSetBlendConstants cmdSetBlendConstants;
extern PFN_vkCmdSetDepthBounds cmdSetDepthBounds;
extern PFN_vkCmdSetStencilCompareMask cmdSetStencilCompareMask;
extern PFN_vkCmdSetStencilWriteMask cmdSetStencilWriteMask;
extern PFN_vkCmdSetStencilReference cmdSetStencilReference;
extern PFN_vkCmdBindDescriptorSets cmdBindDescriptorSets;
extern PFN_vkCmdBindIndexBuffer cmdBindIndexBuffer;
extern PFN_vkCmdBindVertexBuffers cmdBindVertexBuffers;
extern PFN_vkCmdDraw cmdDraw;
extern PFN_vkCmdDrawIndexed cmdDrawIndexed;
extern PFN_vkCmdPipelineBarrier2KHR cmdPipelineBarrier2KHR;
extern PFN_vkCmdWaitEvents2KHR cmdWaitEvents2KHR;
extern PFN_vkCmdDrawIndirect cmdDrawIndirect;
extern PFN_vkCmdDrawIndexedIndirect cmdDrawIndexedIndirect;
extern PFN_vkCmdDispatch cmdDispatch;
extern PFN_vkCmdDispatchIndirect cmdDispatchIndirect;
extern PFN_vkCmdResetEvent2KHR cmdResetEvent2KHR;
extern PFN_vkCmdSetEvent2KHR cmdSetEvent2KHR;
extern PFN_vkCmdEndRenderPass2KHR cmdEndRenderPass2KHR;
extern PFN_vkCmdCopyBuffer cmdCopyBuffer;
extern PFN_vkCmdCopyImage cmdCopyImage;
extern PFN_vkCmdBlitImage cmdBlitImage;
extern PFN_vkCmdCopyBufferToImage cmdCopyBufferToImage;
extern PFN_vkCmdCopyImageToBuffer cmdCopyImageToBuffer;
extern PFN_vkCmdNextSubpass2KHR cmdNextSubpass2KHR;
extern PFN_vkCmdBeginRenderPass2KHR cmdBeginRenderPass2KHR;
extern PFN_vkCmdUpdateBuffer cmdUpdateBuffer;
extern PFN_vkCmdFillBuffer cmdFillBuffer;
extern PFN_vkCmdClearColorImage cmdClearColorImage;
extern PFN_vkCmdClearDepthStencilImage cmdClearDepthStencilImage;
extern PFN_vkCmdClearAttachments cmdClearAttachments;
extern PFN_vkCmdResolveImage cmdResolveImage;
extern PFN_vkCmdSetEvent cmdSetEvent;
extern PFN_vkCmdResetEvent cmdResetEvent;
extern PFN_vkCmdWaitEvents cmdWaitEvents;
extern PFN_vkCmdPipelineBarrier cmdPipelineBarrier;
extern PFN_vkCmdBeginQuery cmdBeginQuery;
extern PFN_vkCmdEndQuery cmdEndQuery;
extern PFN_vkCreateRenderPass2KHR createRenderPass2KHR;
extern PFN_vkGetDeviceQueue2 getDeviceQueue2;
extern PFN_vkCmdResetQueryPool cmdResetQueryPool;
extern PFN_vkCmdWriteTimestamp cmdWriteTimestamp;
extern PFN_vkCmdCopyQueryPoolResults cmdCopyQueryPoolResults;
extern PFN_vkCmdPushConstants cmdPushConstants;
extern PFN_vkCmdBeginRenderPass cmdBeginRenderPass;
extern PFN_vkCmdNextSubpass cmdNextSubpass;
extern PFN_vkCmdEndRenderPass cmdEndRenderPass;
extern PFN_vkCmdExecuteCommands cmdExecuteCommands;
#ifdef __ANDROID__
extern PFN_vkCreateAndroidSurfaceKHR createAndroidSurfaceKHR;
#endif
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR getPhysicalDeviceSparseImageFormatProperties2KHR;
extern PFN_vkGetPhysicalDeviceMemoryProperties2KHR getPhysicalDeviceMemoryProperties2KHR;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR getPhysicalDeviceQueueFamilyProperties2KHR;
extern PFN_vkGetPhysicalDeviceImageFormatProperties2KHR getPhysicalDeviceImageFormatProperties2KHR;
extern PFN_vkGetPhysicalDeviceFormatProperties2KHR getPhysicalDeviceFormatProperties2KHR;
extern PFN_vkGetPhysicalDeviceProperties2KHR getPhysicalDeviceProperties2KHR;
extern PFN_vkGetPhysicalDeviceFeatures2KHR getPhysicalDeviceFeatures2KHR;
#if !defined(__ANDROID__) && !defined(_WIN32)
extern PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR getPhysicalDeviceXcbPresentationSupportKHR;
#endif
extern PFN_vkDestroySurfaceKHR destroySurfaceKHR;
extern PFN_vkGetPhysicalDeviceSurfaceSupportKHR getPhysicalDeviceSurfaceSupportKHR;
extern PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR getPhysicalDeviceSurfaceCapabilitiesKHR;
extern PFN_vkGetPhysicalDeviceSurfaceFormatsKHR getPhysicalDeviceSurfaceFormatsKHR;
extern PFN_vkGetPhysicalDeviceSurfacePresentModesKHR getPhysicalDeviceSurfacePresentModesKHR;
extern PFN_vkCreateSwapchainKHR createSwapchainKHR;
extern PFN_vkDestroySwapchainKHR destroySwapchainKHR;
extern PFN_vkGetSwapchainImagesKHR getSwapchainImagesKHR;
extern PFN_vkAcquireNextImageKHR acquireNextImageKHR;
extern PFN_vkQueuePresentKHR queuePresentKHR;
#if !defined(__ANDROID__) && !defined(_WIN32)
extern PFN_vkCreateXcbSurfaceKHR createXcbSurfaceKHR;
#endif
#ifdef __linux__
extern PFN_vkCreateWaylandSurfaceKHR createWaylandSurfaceKHR;
#endif
#ifdef __linux__
extern PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR getPhysicalDeviceWaylandPresentationSupportKHR;
#endif
#ifdef _WIN32
extern PFN_vkCreateWin32SurfaceKHR createWin32SurfaceKHR;
#endif
#ifdef _WIN32
extern PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR getPhysicalDeviceWin32PresentationSupportKHR;
#endif

// Functions that obtain the function pointers.
// The process of obtaining the procedures for use is as follows:
//
// 1. Fetch the vkGetInstanceProcAddr symbol and assign to getInstanceProcAddr.
// 2. Call getGlobalProcs to load global procedures.
// 3. Create a valid VkInstance and use it in a call to getInstanceProcs.
// 4. Create a valid VkDevice and use it in a call to getDeviceProcs.
//
// clearProcs can be used to set all function pointers other than
// getInstanceProcAddr to NULL.
void getGlobalProcs(void);
void getInstanceProcs(VkInstance dh);
void getDeviceProcs(VkDevice dh);
void clearProcs(void);

// Functions that wrap calls to function pointers. Used by Go code.

// vkCreateInstance
static inline VkResult vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance) {
	return createInstance(pCreateInfo, pAllocator, pInstance);
}

// vkDestroyInstance
static inline void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator) {
	destroyInstance(instance, pAllocator);
}

// vkEnumeratePhysicalDevices
static inline VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
	return enumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
}

// vkGetDeviceProcAddr
static inline PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char* pName) {
	return getDeviceProcAddr(device, pName);
}

// vkGetInstanceProcAddr
static inline PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char* pName) {
	return getInstanceProcAddr(instance, pName);
}

// vkGetPhysicalDeviceProperties
static inline void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) {
	getPhysicalDeviceProperties(physicalDevice, pProperties);
}

// vkGetPhysicalDeviceQueueFamilyProperties
static inline void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) {
	getPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

// vkGetPhysicalDeviceMemoryProperties
static inline void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
	getPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
}

// vkGetPhysicalDeviceFeatures
static inline void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) {
	getPhysicalDeviceFeatures(physicalDevice, pFeatures);
}

// vkGetPhysicalDeviceFormatProperties
static inline void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) {
	getPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
}

// vkGetPhysicalDeviceImageFormatProperties
static inline VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
	return getPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}

// vkCreateDevice
static inline VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
	return createDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
}

// vkDestroyDevice
static inline void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator) {
	destroyDevice(device, pAllocator);
}

// vkEnumerateInstanceVersion
static inline VkResult vkEnumerateInstanceVersion(uint32_t* pApiVersion) {
	return enumerateInstanceVersion(pApiVersion);
}

// vkEnumerateInstanceLayerProperties
static inline VkResult vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return enumerateInstanceLayerProperties(pPropertyCount, pProperties);
}

// vkEnumerateInstanceExtensionProperties
static inline VkResult vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return enumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
}

// vkEnumerateDeviceLayerProperties
static inline VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return enumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
}

// vkEnumerateDeviceExtensionProperties
static inline VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return enumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
}

// vkGetDeviceQueue
static inline void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) {
	getDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
}

// vkQueueSubmit
static inline VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) {
	return queueSubmit(queue, submitCount, pSubmits, fence);
}

// vkQueueWaitIdle
static inline VkResult vkQueueWaitIdle(VkQueue queue) {
	return queueWaitIdle(queue);
}

// vkDeviceWaitIdle
static inline VkResult vkDeviceWaitIdle(VkDevice device) {
	return deviceWaitIdle(device);
}

// vkAllocateMemory
static inline VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
	return allocateMemory(device, pAllocateInfo, pAllocator, pMemory);
}

// vkFreeMemory
static inline void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) {
	freeMemory(device, memory, pAllocator);
}

// vkMapMemory
static inline VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
	return mapMemory(device, memory, offset, size, flags, ppData);
}

// vkUnmapMemory
static inline void vkUnmapMemory(VkDevice device, VkDeviceMemory memory) {
	unmapMemory(device, memory);
}

// vkFlushMappedMemoryRanges
static inline VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return flushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

// vkInvalidateMappedMemoryRanges
static inline VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return invalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}

// vkGetDeviceMemoryCommitment
static inline void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) {
	getDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
}

// vkGetBufferMemoryRequirements
static inline void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) {
	getBufferMemoryRequirements(device, buffer, pMemoryRequirements);
}

// vkBindBufferMemory
static inline VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return bindBufferMemory(device, buffer, memory, memoryOffset);
}

// vkGetImageMemoryRequirements
static inline void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) {
	getImageMemoryRequirements(device, image, pMemoryRequirements);
}

// vkBindImageMemory
static inline VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return bindImageMemory(device, image, memory, memoryOffset);
}

// vkGetImageSparseMemoryRequirements
static inline void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
	getImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

// vkGetPhysicalDeviceSparseImageFormatProperties
static inline void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) {
	getPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}

// vkQueueBindSparse
static inline VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) {
	return queueBindSparse(queue, bindInfoCount, pBindInfo, fence);
}

// vkCreateFence
static inline VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	return createFence(device, pCreateInfo, pAllocator, pFence);
}

// vkDestroyFence
static inline void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator) {
	destroyFence(device, fence, pAllocator);
}

// vkResetFences
static inline VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences) {
	return resetFences(device, fenceCount, pFences);
}

// vkGetFenceStatus
static inline VkResult vkGetFenceStatus(VkDevice device, VkFence fence) {
	return getFenceStatus(device, fence);
}

// vkWaitForFences
static inline VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) {
	return waitForFences(device, fenceCount, pFences, waitAll, timeout);
}

// vkCreateSemaphore
static inline VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
	return createSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
}

// vkDestroySemaphore
static inline void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) {
	destroySemaphore(device, semaphore, pAllocator);
}

// vkCreateEvent
static inline VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
	return createEvent(device, pCreateInfo, pAllocator, pEvent);
}

// vkDestroyEvent
static inline void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator) {
	destroyEvent(device, event, pAllocator);
}

// vkGetEventStatus
static inline VkResult vkGetEventStatus(VkDevice device, VkEvent event) {
	return getEventStatus(device, event);
}

// vkSetEvent
static inline VkResult vkSetEvent(VkDevice device, VkEvent event) {
	return setEvent(device, event);
}

// vkResetEvent
static inline VkResult vkResetEvent(VkDevice device, VkEvent event) {
	return resetEvent(device, event);
}

// vkCreateQueryPool
static inline VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
	return createQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
}

// vkDestroyQueryPool
static inline void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) {
	destroyQueryPool(device, queryPool, pAllocator);
}

// vkGetQueryPoolResults
static inline VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
	return getQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}

// vkCmdEndRenderingKHR
static inline void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) {
	cmdEndRenderingKHR(commandBuffer);
}

// vkCmdBeginRenderingKHR
static inline void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo) {
	cmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
}

// vkCreateBuffer
static inline VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
	return createBuffer(device, pCreateInfo, pAllocator, pBuffer);
}

// vkDestroyBuffer
static inline void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator) {
	destroyBuffer(device, buffer, pAllocator);
}

// vkCreateBufferView
static inline VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
	return createBufferView(device, pCreateInfo, pAllocator, pView);
}

// vkDestroyBufferView
static inline void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) {
	destroyBufferView(device, bufferView, pAllocator);
}

// vkCreateImage
static inline VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) {
	return createImage(device, pCreateInfo, pAllocator, pImage);
}

// vkDestroyImage
static inline void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator) {
	destroyImage(device, image, pAllocator);
}

// vkGetImageSubresourceLayout
static inline void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) {
	getImageSubresourceLayout(device, image, pSubresource, pLayout);
}

// vkCreateImageView
static inline VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) {
	return createImageView(device, pCreateInfo, pAllocator, pView);
}

// vkDestroyImageView
static inline void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator) {
	destroyImageView(device, imageView, pAllocator);
}

// vkCreateShaderModule
static inline VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
	return createShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
}

// vkDestroyShaderModule
static inline void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) {
	destroyShaderModule(device, shaderModule, pAllocator);
}

// vkCreatePipelineCache
static inline VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
	return createPipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
}

// vkDestroyPipelineCache
static inline void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) {
	destroyPipelineCache(device, pipelineCache, pAllocator);
}

// vkGetPipelineCacheData
static inline VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) {
	return getPipelineCacheData(device, pipelineCache, pDataSize, pData);
}

// vkMergePipelineCaches
static inline VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) {
	return mergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
}

// vkCreateGraphicsPipelines
static inline VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return createGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}

// vkCreateComputePipelines
static inline VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return createComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}

// vkCmdWriteTimestamp2KHR
static inline void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) {
	cmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
}

// vkDestroyPipeline
static inline void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) {
	destroyPipeline(device, pipeline, pAllocator);
}

// vkCreatePipelineLayout
static inline VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
	return createPipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
}

// vkDestroyPipelineLayout
static inline void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) {
	destroyPipelineLayout(device, pipelineLayout, pAllocator);
}

// vkCreateSampler
static inline VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
	return createSampler(device, pCreateInfo, pAllocator, pSampler);
}

// vkDestroySampler
static inline void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator) {
	destroySampler(device, sampler, pAllocator);
}

// vkCreateDescriptorSetLayout
static inline VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
	return createDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
}

// vkDestroyDescriptorSetLayout
static inline void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) {
	destroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
}

// vkCreateDescriptorPool
static inline VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
	return createDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
}

// vkDestroyDescriptorPool
static inline void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) {
	destroyDescriptorPool(device, descriptorPool, pAllocator);
}

// vkResetDescriptorPool
static inline VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
	return resetDescriptorPool(device, descriptorPool, flags);
}

// vkAllocateDescriptorSets
static inline VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
	return allocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
}

// vkFreeDescriptorSets
static inline VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) {
	return freeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
}

// vkUpdateDescriptorSets
static inline void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) {
	updateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}

// vkCreateFramebuffer
static inline VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
	return createFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
}

// vkDestroyFramebuffer
static inline void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) {
	destroyFramebuffer(device, framebuffer, pAllocator);
}

// vkCreateRenderPass
static inline VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return createRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
}

// vkDestroyRenderPass
static inline void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) {
	destroyRenderPass(device, renderPass, pAllocator);
}

// vkGetRenderAreaGranularity
static inline void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) {
	getRenderAreaGranularity(device, renderPass, pGranularity);
}

// vkCreateCommandPool
static inline VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
	return createCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
}

// vkDestroyCommandPool
static inline void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) {
	destroyCommandPool(device, commandPool, pAllocator);
}

// vkResetCommandPool
static inline VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
	return resetCommandPool(device, commandPool, flags);
}

// vkAllocateCommandBuffers
static inline VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
	return allocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
}

// vkFreeCommandBuffers
static inline void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	freeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
}

// vkBeginCommandBuffer
static inline VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) {
	return beginCommandBuffer(commandBuffer, pBeginInfo);
}

// vkEndCommandBuffer
static inline VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer) {
	return endCommandBuffer(commandBuffer);
}

// vkResetCommandBuffer
static inline VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
	return resetCommandBuffer(commandBuffer, flags);
}

// vkCmdBindPipeline
static inline void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	cmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}

// vkQueueSubmit2KHR
static inline VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence) {
	return queueSubmit2KHR(queue, submitCount, pSubmits, fence);
}

// vkCmdSetViewport
static inline void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) {
	cmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

// vkCmdSetScissor
static inline void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) {
	cmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

// vkCmdSetLineWidth
static inline void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
	cmdSetLineWidth(commandBuffer, lineWidth);
}

// vkCmdSetDepthBias
static inline void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
	cmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

// vkCmdSetBlendConstants
static inline void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) {
	cmdSetBlendConstants(commandBuffer, blendConstants);
}

// vkCmdSetDepthBounds
static inline void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
	cmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

// vkCmdSetStencilCompareMask
static inline void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
	cmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

// vkCmdSetStencilWriteMask
static inline void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
	cmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

// vkCmdSetStencilReference
static inline void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
	cmdSetStencilReference(commandBuffer, faceMask, reference);
}

// vkCmdBindDescriptorSets
static inline void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) {
	cmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

// vkCmdBindIndexBuffer
static inline void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
	cmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

// vkCmdBindVertexBuffers
static inline void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) {
	cmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

// vkCmdDraw
static inline void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	cmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

// vkCmdDrawIndexed
static inline void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) {
	cmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

// vkCmdPipelineBarrier2KHR
static inline void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo) {
	cmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
}

// vkCmdWaitEvents2KHR
static inline void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos) {
	cmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
}

// vkCmdDrawIndirect
static inline void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	cmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

// vkCmdDrawIndexedIndirect
static inline void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	cmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

// vkCmdDispatch
static inline void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	cmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}

// vkCmdDispatchIndirect
static inline void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	cmdDispatchIndirect(commandBuffer, buffer, offset);
}

// vkCmdResetEvent2KHR
static inline void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) {
	cmdResetEvent2KHR(commandBuffer, event, stageMask);
}

// vkCmdSetEvent2KHR
static inline void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo) {
	cmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
}

// vkCmdEndRenderPass2KHR
static inline void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo) {
	cmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
}

// vkCmdCopyBuffer
static inline void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) {
	cmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

// vkCmdCopyImage
static inline void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) {
	cmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdBlitImage
static inline void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) {
	cmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

// vkCmdCopyBufferToImage
static inline void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	cmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdCopyImageToBuffer
static inline void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	cmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

// vkCmdNextSubpass2KHR
static inline void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo) {
	cmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}

// vkCmdBeginRenderPass2KHR
static inline void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo) {
	cmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}

// vkCmdUpdateBuffer
static inline void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) {
	cmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

// vkCmdFillBuffer
static inline void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
	cmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

// vkCmdClearColorImage
static inline void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	cmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

// vkCmdClearDepthStencilImage
static inline void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	cmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

// vkCmdClearAttachments
static inline void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) {
	cmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

// vkCmdResolveImage
static inline void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) {
	cmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

// vkCmdSetEvent
static inline void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	cmdSetEvent(commandBuffer, event, stageMask);
}

// vkCmdResetEvent
static inline void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	cmdResetEvent(commandBuffer, event, stageMask);
}

// vkCmdWaitEvents
static inline void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	cmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

// vkCmdPipelineBarrier
static inline void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	cmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

// vkCmdBeginQuery
static inline void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
	cmdBeginQuery(commandBuffer, queryPool, query, flags);
}

// vkCmdEndQuery
static inline void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
	cmdEndQuery(commandBuffer, queryPool, query);
}

// vkCreateRenderPass2KHR
static inline VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return createRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
}

// vkGetDeviceQueue2
static inline void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) {
	getDeviceQueue2(device, pQueueInfo, pQueue);
}

// vkCmdResetQueryPool
static inline void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	cmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

// vkCmdWriteTimestamp
static inline void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) {
	cmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

// vkCmdCopyQueryPoolResults
static inline void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) {
	cmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

// vkCmdPushConstants
static inline void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) {
	cmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

// vkCmdBeginRenderPass
static inline void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) {
	cmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

// vkCmdNextSubpass
static inline void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) {
	cmdNextSubpass(commandBuffer, contents);
}

// vkCmdEndRenderPass
static inline void vkCmdEndRenderPass(VkCommandBuffer commandBuffer) {
	cmdEndRenderPass(commandBuffer);
}

// vkCmdExecuteCommands
static inline void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	cmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

// vkCreateAndroidSurfaceKHR
#ifdef __ANDROID__
static inline VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif

// vkGetPhysicalDeviceSparseImageFormatProperties2KHR
static inline void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) {
	getPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}

// vkGetPhysicalDeviceMemoryProperties2KHR
static inline void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
	getPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
}

// vkGetPhysicalDeviceQueueFamilyProperties2KHR
static inline void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) {
	getPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

// vkGetPhysicalDeviceImageFormatProperties2KHR
static inline VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
	return getPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
}

// vkGetPhysicalDeviceFormatProperties2KHR
static inline void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) {
	getPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
}

// vkGetPhysicalDeviceProperties2KHR
static inline void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) {
	getPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
}

// vkGetPhysicalDeviceFeatures2KHR
static inline void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) {
	getPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
}

// vkGetPhysicalDeviceXcbPresentationSupportKHR
#if !defined(__ANDROID__) && !defined(_WIN32)
static inline VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id) {
	return getPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
}
#endif

// vkDestroySurfaceKHR
static inline void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) {
	destroySurfaceKHR(instance, surface, pAllocator);
}

// vkGetPhysicalDeviceSurfaceSupportKHR
static inline VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) {
	return getPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
}

// vkGetPhysicalDeviceSurfaceCapabilitiesKHR
static inline VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
	return getPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
}

// vkGetPhysicalDeviceSurfaceFormatsKHR
static inline VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
	return getPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}

// vkGetPhysicalDeviceSurfacePresentModesKHR
static inline VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	return getPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
}

// vkCreateSwapchainKHR
static inline VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) {
	return createSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
}

// vkDestroySwapchainKHR
static inline void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {
	destroySwapchainKHR(device, swapchain, pAllocator);
}

// vkGetSwapchainImagesKHR
static inline VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) {
	return getSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
}

// vkAcquireNextImageKHR
static inline VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) {
	return acquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
}

// vkQueuePresentKHR
static inline VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo) {
	return queuePresentKHR(queue, pPresentInfo);
}

// vkCreateXcbSurfaceKHR
#if !defined(__ANDROID__) && !defined(_WIN32)
static inline VkResult vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif

// vkCreateWaylandSurfaceKHR
#ifdef __linux__
static inline VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif

// vkGetPhysicalDeviceWaylandPresentationSupportKHR
#ifdef __linux__
static inline VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display) {
	return getPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
}
#endif

// vkCreateWin32SurfaceKHR
#ifdef _WIN32
static inline VkResult vkCreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return createWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif

// vkGetPhysicalDeviceWin32PresentationSupportKHR
#ifdef _WIN32
static inline VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) {
	return getPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
}
#endif

// Macros that shadow certain values defined as static constants in
// the API header. Used by Go code.

// VkAccessFlagBits2
#define VK_ACCESS_2_NONE 0
#define VK_ACCESS_2_NONE_KHR VK_ACCESS_2_NONE
#define VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT (1ULL << 0)
#define VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT
#define VK_ACCESS_2_INDEX_READ_BIT (1ULL << 1)
#define VK_ACCESS_2_INDEX_READ_BIT_KHR VK_ACCESS_2_INDEX_READ_BIT
#define VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT (1ULL << 2)
#define VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT
#define VK_ACCESS_2_UNIFORM_READ_BIT (1ULL << 3)
#define VK_ACCESS_2_UNIFORM_READ_BIT_KHR VK_ACCESS_2_UNIFORM_READ_BIT
#define VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT (1ULL << 4)
#define VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT
#define VK_ACCESS_2_SHADER_READ_BIT (1ULL << 5)
#define VK_ACCESS_2_SHADER_READ_BIT_KHR VK_ACCESS_2_SHADER_READ_BIT
#define VK_ACCESS_2_SHADER_WRITE_BIT (1ULL << 6)
#define VK_ACCESS_2_SHADER_WRITE_BIT_KHR VK_ACCESS_2_SHADER_WRITE_BIT
#define VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT (1ULL << 7)
#define VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT
#define VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT (1ULL << 8)
#define VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT
#define VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT (1ULL << 9)
#define VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT
#define VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT (1ULL << 10)
#define VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
#define VK_ACCESS_2_TRANSFER_READ_BIT (1ULL << 11)
#define VK_ACCESS_2_TRANSFER_READ_BIT_KHR VK_ACCESS_2_TRANSFER_READ_BIT
#define VK_ACCESS_2_TRANSFER_WRITE_BIT (1ULL << 12)
#define VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR VK_ACCESS_2_TRANSFER_WRITE_BIT
#define VK_ACCESS_2_HOST_READ_BIT (1ULL << 13)
#define VK_ACCESS_2_HOST_READ_BIT_KHR VK_ACCESS_2_HOST_READ_BIT
#define VK_ACCESS_2_HOST_WRITE_BIT (1ULL << 14)
#define VK_ACCESS_2_HOST_WRITE_BIT_KHR VK_ACCESS_2_HOST_WRITE_BIT
#define VK_ACCESS_2_MEMORY_READ_BIT (1ULL << 15)
#define VK_ACCESS_2_MEMORY_READ_BIT_KHR VK_ACCESS_2_MEMORY_READ_BIT
#define VK_ACCESS_2_MEMORY_WRITE_BIT (1ULL << 16)
#define VK_ACCESS_2_MEMORY_WRITE_BIT_KHR VK_ACCESS_2_MEMORY_WRITE_BIT
#define VK_ACCESS_2_SHADER_SAMPLED_READ_BIT (1ULL << 32)
#define VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR VK_ACCESS_2_SHADER_SAMPLED_READ_BIT
#define VK_ACCESS_2_SHADER_STORAGE_READ_BIT (1ULL << 33)
#define VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR VK_ACCESS_2_SHADER_STORAGE_READ_BIT
#define VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT (1ULL << 34)
#define VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT

// VkPipelineStageFlagBits2
#define VK_PIPELINE_STAGE_2_NONE 0
#define VK_PIPELINE_STAGE_2_NONE_KHR VK_PIPELINE_STAGE_2_NONE
#define VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT (1ULL << 0)
#define VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT
#define VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT (1ULL << 1)
#define VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT
#define VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT (1ULL << 2)
#define VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT
#define VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT (1ULL << 3)
#define VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT
#define VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT (1ULL << 4)
#define VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT
#define VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT (1ULL << 5)
#define VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT
#define VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT (1ULL << 6)
#define VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT
#define VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT (1ULL << 7)
#define VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT
#define VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT (1ULL << 8)
#define VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT
#define VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT (1ULL << 9)
#define VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT
#define VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT (1ULL << 10)
#define VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT
#define VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT (1ULL << 11)
#define VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT
#define VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT (1ULL << 12)
#define VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT
#define VK_PIPELINE_STAGE_2_TRANSFER_BIT VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR
#define VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT
#define VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT (1ULL << 13)
#define VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT
#define VK_PIPELINE_STAGE_2_HOST_BIT (1ULL << 14)
#define VK_PIPELINE_STAGE_2_HOST_BIT_KHR VK_PIPELINE_STAGE_2_HOST_BIT
#define VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT (1ULL << 15)
#define VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT
#define VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT (1ULL << 16)
#define VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT
#define VK_PIPELINE_STAGE_2_COPY_BIT (1ULL << 32)
#define VK_PIPELINE_STAGE_2_COPY_BIT_KHR VK_PIPELINE_STAGE_2_COPY_BIT
#define VK_PIPELINE_STAGE_2_RESOLVE_BIT (1ULL << 33)
#define VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR VK_PIPELINE_STAGE_2_RESOLVE_BIT
#define VK_PIPELINE_STAGE_2_BLIT_BIT (1ULL << 34)
#define VK_PIPELINE_STAGE_2_BLIT_BIT_KHR VK_PIPELINE_STAGE_2_BLIT_BIT
#define VK_PIPELINE_STAGE_2_CLEAR_BIT (1ULL << 35)
#define VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR VK_PIPELINE_STAGE_2_CLEAR_BIT
#define VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT (1ULL << 36)
#define VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT
#define VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT (1ULL << 37)
#define VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT
#define VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT (1ULL << 38)
#define VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT

#endif // PROC_H
