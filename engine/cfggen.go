// Copyright 2023 Gustavo C. Viegas. All rights reserved.

//go:build ignore

// cfggen generates constants used in the engine.
//
// One may provide custom values to override the
// defaults. The following environment variables
// can be used for such:
//
//	environment        | overrides   | type
//	-------------------|-------------|--------
//	NEO3_N_FRAME       | NFrame      | integer
//	NEO3_N_LIGHT       | NLight      | integer
//	NEO3_N_SHADOW      | NShadow     | integer
//	NEO3_N_JOINT       | NJoint      | integer
//	NEO3_N_DRAWABLE    | NDrawable   | integer
//	NEO3_N_MATERIAL    | NMaterial   | integer
//	NEO3_N_SKIN        | NSkin       | integer
//	NEO3_N_MESH_BUFFER | NMeshBuffer | integer
package main

import (
	"cmp"
	"fmt"
	"os"
	"strconv"
	"strings"

	"gviegas/neo3/engine/internal/shader"
)

type Value[T cmp.Ordered] struct {
	Min, Max, Dfl T
	Clamp         func(min, max, val T) T
}

type Const[T cmp.Ordered] struct {
	Value[T]
	Ident string
	Env   string
	Doc   string
}

func (c *Const[T]) String() string {
	val := c.Dfl
	if env, ok := os.LookupEnv(c.Env); ok {
		// TODO: Handle non-integer types.
		x, err := strconv.Atoi(env)
		if err != nil {
			panic(fmt.Sprintf("cfggen.go: failed to convert env %s: %v", c.Env, err))
		}
		if c.Clamp != nil {
			val = c.Clamp(c.Min, c.Max, T(x))
		} else {
			val = max(c.Min, min(c.Max, T(x)))
		}
		if val != T(x) {
			fmt.Printf("cfggen.go: %s not valid (%v): using clamped value (%v)\n", c.Env, T(x), val)
		}
	} else {
		fmt.Printf("cfggen.go: %s env not defined: using default (%v)\n", c.Env, c.Dfl)
	}
	return fmt.Sprintf("\n%s\nconst %s = %v\n", c.Doc, c.Ident, val)
}

var (
	NFrame = Const[int]{
		Value: Value[int]{
			Min: 1,
			Max: 3,
			Dfl: 2,
		},
		Ident: "NFrame",
		Env:   "NEO3_N_FRAME",
		Doc:   "// Maximum number of frames in flight.",
	}

	NLight = Const[int]{
		Value: Value[int]{
			Min: 0,
			Max: int(shader.MaxLight),
			Dfl: int(shader.MaxLight),
		},
		Ident: "NLight",
		Env:   "NEO3_N_LIGHT",
		Doc:   "// Maximum number of lights per frame.",
	}

	NShadow = Const[int]{
		Value: Value[int]{
			Min: 0,
			Max: shader.MaxShadow,
			Dfl: shader.MaxShadow,
		},
		Ident: "NShadow",
		Env:   "NEO3_N_SHADOW",
		Doc:   "// Maximum number of shadow maps per frame.",
	}

	NJoint = Const[int]{
		Value: Value[int]{
			Min: 0,
			Max: int(shader.MaxJoint),
			Dfl: int(shader.MaxJoint),
		},
		Ident: "NJoint",
		Env:   "NEO3_N_JOINT",
		Doc:   "// Maximum number of joints in a skin.",
	}

	NDrawable = Const[int]{
		Value: Value[int]{
			Min: 32,
			Max: 1<<31 - 1,
			Dfl: 2048,
		},
		Ident: "NDrawable",
		Env:   "NEO3_N_DRAWABLE",
		Doc:   "// Maximum number of drawables per frame.",
	}

	NMaterial = Const[int]{
		Value: Value[int]{
			Min: 0,
			Max: 1<<31 - 1,
			Dfl: 512,
		},
		Ident: "NMaterial",
		Env:   "NEO3_N_MATERIAL",
		Doc:   "// Maximum number of materials per frame.",
	}

	NSkin = Const[int]{
		Value: Value[int]{
			Min: 0,
			Max: 1<<31 - 1,
			Dfl: 1024,
		},
		Ident: "NSkin",
		Env:   "NEO3_N_SKIN",
		Doc:   "// Maximum number of skins per frame.",
	}

	NMeshBuffer = Const[int64]{
		Value: Value[int64]{
			Min: 16384,
			Max: 1 << 40,
			Dfl: 1 << 22,
			Clamp: func(minv, maxv, val int64) int64 {
				val = max(minv, min(maxv, val))
				val = (val + 16383) &^ 16383
				return val
			},
		},
		Ident: "NMeshBuffer",
		Env:   "NEO3_N_MESH_BUFFER",
		Doc:   "// Initial size of the mesh buffer, in bytes.",
	}
)

const Preamble = `// Code generated by cfggen.go. DO NOT EDIT.

package engine
`

const Name = "cfg.go"

func main() {
	file, err := os.Create(Name)
	if err != nil {
		panic(fmt.Sprintf("cfggen.go: %v", err))
	}

	defer func() {
		file.Close()
		if x := recover(); x != nil {
			os.Remove(Name)
			fmt.Printf("%s\ncfggen.go: FATAL: %s not generated due to previous error\n", x, Name)
		}
	}()

	var sb strings.Builder
	sb.WriteString(Preamble)
	sb.WriteString(NFrame.String())
	sb.WriteString(NLight.String())
	sb.WriteString(NShadow.String())
	sb.WriteString(NJoint.String())
	sb.WriteString(NDrawable.String())
	sb.WriteString(NMaterial.String())
	sb.WriteString(NSkin.String())
	sb.WriteString(NMeshBuffer.String())

	if _, err := file.WriteString(sb.String()); err != nil {
		panic(fmt.Sprintf("cfggen.go: %v", err))
	}
}
